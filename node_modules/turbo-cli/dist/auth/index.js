var prompt=require("prompt"),Promise=require("bluebird"),path=require("path"),os=require("os"),fs=require("fs"),utils=require("../utils");module.exports={showAWSPrompt:function(){return new Promise(function(r,t){var e={properties:{bucket:{},folder:{}}};prompt.message=null,prompt.start(),prompt.get(e,function(e,n){if(e)return void t(e);r(n)})})},showAWSConfigInputs:function(){return new Promise(function(r,t){var e={properties:{awsKey:{hidden:!0},awsSecret:{hidden:!0},awsRole:{}}};prompt.message=null,prompt.start(),prompt.get(e,function(e,n){if(e)return void t(e);r(n)})})},showPrompt:function(){return new Promise(function(r,t){var e={properties:{email:{},password:{hidden:!0}}};prompt.message=null,prompt.start(),prompt.get(e,function(e,n){if(e)return void t(e);r(n)})})},isLoggedIn:function(){var r=path.join(os.homedir(),".turbo_user");return 0!=fs.existsSync(r)},connectApp:function(){return new Promise(function(r,t){var e={properties:{siteId:{},apiKey:{}}};prompt.message=null,prompt.start(),prompt.get(e,function(e,n){if(e)return void t(e);r(n)})})},currentUser:function(){return new Promise(function(r,t){var e=path.join(os.homedir(),".turbo_user");if(0==fs.existsSync(e))return void t(new Error("Please log in:\n$ turbo login"));utils.readFile(e).then(function(t){currentUser=JSON.parse(t),r(currentUser)}).catch(function(r){t(r)})})},isAuthorized:function(r,t){if(null==t)return!1;if(r.profile.id==t.id)return!0;for(var e=!1,n=0;n<r.collaborators.length;n++){if(r.collaborators[n].id==t.id){e=!0;break}}return e},awsConfig:function(){return new Promise(function(r,t){var e=path.join(os.homedir(),".turbo_aws_config");if(0==fs.existsSync(e))return void t(new Error("AWS Config not set. To set:\n$ turbo awsConfig"));utils.readFile(e).then(function(t){awsSettings=JSON.parse(t),r(awsSettings)}).catch(function(r){t(r)})})},awsConfigSet:function(){var r=path.join(os.homedir(),".turbo_aws_config");return 0!=fs.existsSync(r)}};