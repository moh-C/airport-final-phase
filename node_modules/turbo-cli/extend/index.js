var program = require('commander')
var Promise = require('bluebird')
var shell = require('shelljs')
var path = require('path')
var utils = require('../utils')
var reactDependencies = require('../default/packagejson/react.json')
var gulpDependencies = require('../default/packagejson/gulp.json')

var capitalize = function(string) {
	return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()
}

module.exports = function(shell, name, opts){

	return new Promise(function(resolve, reject){
		if (name == 'resource'){
			if (opts.name == null){
				reject(new Error('Invalid Resource Name'))
				return
			}

			if (opts.name.length<2){
				reject(new Error('Invalid Resource Name'))
				return
			}

			const schemaName = capitalize(opts.name)
			utils.readFile(path.join(__dirname, '../extend/resource/Base.js'))
			.then(function(data){
				var str = data.replace("class Base", "class "+schemaName)
				str = str.replace("module.exports = Base", "module.exports = "+schemaName)
				str = str.replace("return 'base'", "return '"+opts.name.toLowerCase()+"'")
				str = str.replace("return 'bases'", "return '"+opts.name.toLowerCase()+"s'") // pluralize. need a better way to do this
				str = str.replace("default:'base'", "default:'"+opts.name.toLowerCase()+"'")

				shell.cd('models')
				return utils.write(schemaName+'.js', str+'\n')
			})
			.then(function(data){
				shell.cd('..')
				return utils.readFile(path.join(__dirname, '../extend/resource/BaseController.js'))
			})
			.then(function(data){
				var str = data.replace("const Base = require('../models/Base')", "const "+schemaName+" = require('../models/"+schemaName+"')")
				str = str.replace("super(Base, process.env)", "super("+schemaName+", process.env)")
				str = str.replace(new RegExp("BaseController", 'g'), schemaName+"Controller") // replace all occurrences
				str = str.replace(new RegExp("Base.collectionName", 'g'), schemaName+".collectionName")
				str = str.replace(new RegExp("Base.resourceName", 'g'), schemaName+".resourceName")
				str = str.replace(new RegExp("base.summary", 'g'), schemaName.toLowerCase()+".summary")
				str = str.replace(new RegExp("bases", 'g'), schemaName.toLowerCase()+"s") // pluralize. need a better way to do this
				str = str.replace(new RegExp("base =", 'g'), schemaName.toLowerCase()+" =")
				str = str.replace(new RegExp("Base.", 'g'), schemaName+".")

				shell.cd('controllers')
				return utils.write(schemaName+'Controller.js', str+'\n')
			})
			.then(function(data){
				shell.cd('..')
				shell.cd('tmp')
				var dbStr = ''
				return utils.write(schemaName.toLowerCase()+'s.db', dbStr)
			})
			.then(function(data){
				shell.cd('..')
				resolve({
					confirmation:'success',
					message:'Resource "'+schemaName+ '" successfully added'
				})
			})
			.catch(function(err){
				reject(err)
			})

			return
		}

		if (name == 'gulp'){
			shell.cp('-R', path.join(__dirname, '../extend/gulp/gulpfile.js'), 'gulpfile.js')
			utils.readFile('package.json')
			.then(function(data){
				var json = JSON.parse(data)
				var scripts = Object.assign({}, json.scripts)
				scripts['clean'] = 'rimraf ./public/dist'
				scripts['build'] = 'npm run clean && gulp prod'
				json['scripts'] = scripts

				utils.write('package.json', JSON.stringify(json, null, 2) + '\n')

				shell.exec('npm i -D ' + gulpDependencies.devDependencies.join(' '))

				resolve({confirmation:'success', message:'\n\nGulp successfully integrated. Gulpfile.js file added and "build" & "clean" scripts updated in package.json\n\n'})
			})
			.catch(function(err){
				console.log('Error: ' + err.message)
			})
			return
		}


		if (name == 'api'){
			// models:
			shell.mkdir('-p', 'models')
			shell.cp('-R', path.join(__dirname, '../extend/api/models/*'), 'models/')

			// controllers:
			shell.mkdir('-p', 'controllers')
			shell.cp('-R', path.join(__dirname, '../extend/api/controllers/*'), 'controllers/')

			// routes:
			shell.cp('-R', path.join(__dirname, '../extend/api/routes/*'), 'routes/')

			resolve({confirmation:'success', message:null})
			return
		}

		if (name == 'graphql'){
			shell.mkdir('-p', 'models')
			shell.cp('-R', path.join(__dirname, '../extend/api/models/*'), 'models/')

			shell.mkdir('-p', 'gql')
			shell.cp('-R', path.join(__dirname, '../extend/graphql/gql/*'), 'gql/')

			shell.cp('-R', path.join(__dirname, '../extend/graphql/routes/*'), 'routes/')
			shell.exec('npm i -S graphql express-graphql react-apollo apollo-boost')
			resolve({confirmation:'success', message:null})
			return
		}

		if (name == 'react'){
			// utils.readFile(path.join(__dirname, 'package.json'))
			utils.readFile('package.json')
			.then(function(data){
				// console.log('PACKAGE JSON: ' + data)
				var json = JSON.parse(data)
				var scripts = Object.assign({}, json.scripts)
				scripts['clean'] = 'rimraf ./public/dist'
				scripts['build'] = 'npm run clean && cross-env NODE_ENV=production webpack -p && gulp prod'
				scripts['dev'] = 'webpack --mode development -w'
				scripts['postinstall'] = 'npm run build'
				json['scripts'] = scripts

				utils.write('package.json', JSON.stringify(json, null, 2) + '\n')

				shell.cp('-R', path.join(__dirname, '../default/vertex/webpack.config.js'), 'webpack.config.js')
				shell.cp('-R', path.join(__dirname, '../default/vertex/gulpfile.js'), 'gulpfile.js')

				// views:
				shell.cp('-R', path.join(__dirname, '../default/vertex/views/react.mustache'), 'views/index.mustache')

				// React Source:
				shell.mkdir('-p', 'src')
				shell.cp('-R', path.join(__dirname, '../default/client/src/*'), 'src/')

				shell.exec('npm i -S ' + reactDependencies.dependencies.join(' '))
				shell.exec('npm i -D ' + reactDependencies.devDependencies.join(' '))
				shell.exec('npm run build')

				resolve({confirmation:'success', message:'\n\nReact successfully integrated.\n\n'})
			})
			.catch(function(err){
				console.log('Error: ' + err.message)
			})

			return
		}

		reject(new Error('Invalid Format'))
	})

}
